# Generated by Django 5.2.4 on 2025-09-02 17:08

import dashboard.models
import django.contrib.auth.models
import django.contrib.auth.validators
import django.contrib.postgres.fields
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        ('contenttypes', '0002_remove_content_type_name'),
    ]

    operations = [
        migrations.CreateModel(
            name='Chart',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=25)),
                ('start_date', models.DateField()),
                ('end_date', models.DateField()),
            ],
        ),
        migrations.CreateModel(
            name='GoalType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField()),
            ],
        ),
        migrations.CreateModel(
            name='Milestone',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=25)),
                ('date', models.DateField()),
            ],
        ),
        migrations.CreateModel(
            name='ResourceCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField()),
            ],
        ),
        migrations.CreateModel(
            name='Role',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
                ('redirect_url', models.CharField(default='dashboard:home', help_text='* Path to dashboard, do not change', max_length=255)),
                ('description', models.TextField(blank=True)),
            ],
        ),
        migrations.CreateModel(
            name='Team',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('pinned_msg', models.TextField(default='---', null=True)),
                ('name', models.CharField(blank=True, max_length=40)),
                ('description', models.TextField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='ValueType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField()),
            ],
        ),
        migrations.CreateModel(
            name='WeekRange',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('starting_day', models.DateTimeField()),
                ('end_day', models.DateTimeField()),
            ],
        ),
        migrations.CreateModel(
            name='Users',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('street_address', models.CharField(blank=True, max_length=50)),
                ('phone', models.CharField(blank=True, max_length=12)),
                ('assigned_on', models.DateField(auto_now_add=True)),
                ('notes', models.TextField(blank=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='ChartData',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('task_id', models.IntegerField()),
                ('columns', django.contrib.postgres.fields.ArrayField(base_field=models.IntegerField(), null=True, size=None)),
                ('chart', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dashboard.chart')),
            ],
        ),
        migrations.CreateModel(
            name='ChartSection',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=30, null=True)),
                ('chart', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='dashboard.chart')),
            ],
        ),
        migrations.CreateModel(
            name='Resource',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('what', models.CharField()),
                ('how', models.TextField()),
                ('management', models.BooleanField(null=True)),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dashboard.resourcecategory')),
            ],
        ),
        migrations.CreateModel(
            name='Task',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.TextField()),
                ('name', models.CharField(max_length=36, unique=True)),
                ('creation_date', models.DateTimeField(auto_now_add=True)),
                ('starting_date', models.DateTimeField(blank=True, null=True)),
                ('completion_time', models.FloatField(blank=True, null=True)),
                ('due_date', models.DateTimeField()),
                ('completed', models.BooleanField(default=False)),
                ('urgent', models.BooleanField(default=False)),
                ('picture', models.BinaryField(blank=True, editable=True, null=True)),
                ('content_type', models.CharField(blank=True, max_length=50, null=True)),
                ('completion_note', models.TextField(blank=True, null=True)),
                ('submitted_at', models.DateTimeField(blank=True, null=True)),
                ('denied', models.BooleanField(default=False)),
                ('deny_reason', models.TextField(blank=True, null=True)),
                ('position', models.PositiveIntegerField(default=0)),
                ('chart', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='dashboard.chart')),
                ('section', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='dashboard.chartsection')),
            ],
        ),
        migrations.CreateModel(
            name='DailyReport',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now=True)),
                ('read', models.BooleanField(default=False)),
                ('team', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dashboard.team')),
            ],
        ),
        migrations.AddField(
            model_name='chart',
            name='teams',
            field=models.ManyToManyField(to='dashboard.team'),
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('notes', models.TextField(blank=True)),
                ('availability', models.CharField(blank=True, null=True)),
                ('weekends', models.BooleanField(default=False)),
                ('status', models.TextField(blank=True, default='No status', max_length=80, null=True)),
                ('active_task', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='dashboard.task')),
                ('recipients', models.ManyToManyField(blank=True, default='----', related_name='many_relation', to=settings.AUTH_USER_MODEL)),
                ('role', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='dashboard.role')),
                ('team', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='dashboard.team')),
                ('user', models.OneToOneField(help_text='* You can add a new user with the plus sign ', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'Add a user',
            },
        ),
        migrations.AddField(
            model_name='team',
            name='team_lead',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='team_lead', to='dashboard.userprofile'),
        ),
        migrations.AddField(
            model_name='task',
            name='approved_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='aproved_by', to='dashboard.userprofile'),
        ),
        migrations.AddField(
            model_name='task',
            name='submitted_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='dashboard.userprofile'),
        ),
        migrations.AddField(
            model_name='task',
            name='users',
            field=models.ManyToManyField(related_name='task_users', to='dashboard.userprofile'),
        ),
        migrations.CreateModel(
            name='SubTask',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=40)),
                ('completed', models.BooleanField(default=False)),
                ('description', models.TextField(blank=True, null=True)),
                ('task', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dashboard.task')),
                ('user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='dashboard.userprofile')),
            ],
        ),
        migrations.CreateModel(
            name='Schedule',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('monday', models.CharField(blank=True, help_text='9-17', null=True)),
                ('tuesday', models.CharField(blank=True, null=True)),
                ('wednesday', models.CharField(blank=True, null=True)),
                ('thursday', models.CharField(blank=True, null=True)),
                ('friday', models.CharField(blank=True, null=True)),
                ('saturday', models.CharField(blank=True, null=True)),
                ('sunday', models.CharField(blank=True, null=True)),
                ('unscheduled', models.BooleanField(default=False)),
                ('vacation', models.BooleanField(default=False)),
                ('message', models.TextField(blank=True, null=True)),
                ('request_pending', models.BooleanField(default=False)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dashboard.userprofile')),
                ('week_range', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dashboard.weekrange')),
            ],
        ),
        migrations.CreateModel(
            name='Report',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField()),
                ('time', models.DateTimeField(auto_now_add=True)),
                ('tasks', models.ManyToManyField(to='dashboard.task')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dashboard.userprofile')),
            ],
        ),
        migrations.CreateModel(
            name='MessagesCopy',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=60)),
                ('content', models.TextField()),
                ('timestamp', models.DateTimeField()),
                ('forwarded', models.BooleanField(default=False)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sender_copy', to=settings.AUTH_USER_MODEL)),
                ('task', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='dashboard.task')),
                ('forwarded_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='dashboard.userprofile')),
                ('recipient', models.ManyToManyField(blank=True, default='', null=True, related_name='receiver_copy', to='dashboard.userprofile')),
            ],
        ),
        migrations.CreateModel(
            name='Messages',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=60)),
                ('content', models.TextField()),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('new', models.BooleanField(default=True)),
                ('forwarded', models.BooleanField(default=False)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sender', to=settings.AUTH_USER_MODEL)),
                ('task', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='dashboard.task')),
                ('forwarded_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='dashboard.userprofile')),
                ('recipient', models.ManyToManyField(blank=True, default='', null=True, related_name='receiver', to='dashboard.userprofile')),
            ],
        ),
        migrations.CreateModel(
            name='LogginRecord',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('schedule', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dashboard.schedule')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dashboard.userprofile')),
            ],
        ),
        migrations.CreateModel(
            name='Document',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file', models.FileField(upload_to=dashboard.models.object_directory_path)),
                ('object_id', models.PositiveIntegerField()),
                ('upload_time', models.DateTimeField(auto_now_add=True)),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='contenttypes.contenttype')),
                ('owner', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='dashboard.userprofile')),
            ],
        ),
        migrations.CreateModel(
            name='ChatMessages',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('message', models.CharField(max_length=255)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('team', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dashboard.team')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dashboard.userprofile')),
            ],
        ),
        migrations.CreateModel(
            name='Goal',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(null=True, unique=True)),
                ('accomplished', models.BooleanField(default=False)),
                ('value', models.PositiveIntegerField(null=True)),
                ('type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dashboard.goaltype')),
                ('value_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dashboard.valuetype')),
            ],
        ),
        migrations.CreateModel(
            name='Stats',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('completed_tasks', models.PositiveIntegerField(default=0)),
                ('late_tasks', models.PositiveIntegerField(default=0)),
                ('unfinished_tasks', models.PositiveIntegerField(default=0)),
                ('denied_tasks', models.PositiveIntegerField(default=0)),
                ('urgent_tasks_success', models.PositiveIntegerField(default=0)),
                ('days_missed', models.PositiveIntegerField(default=0)),
                ('days_scheduled', models.PositiveIntegerField(default=0)),
                ('logged', models.PositiveIntegerField(default=0)),
                ('submission', models.PositiveIntegerField(default=0)),
                ('object_id', models.PositiveBigIntegerField(blank=True, null=True)),
                ('stars', models.PositiveIntegerField(blank=True, default=0, null=True)),
                ('star_note', models.TextField(blank=True, null=True)),
                ('content_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='contenttypes.contenttype')),
            ],
            options={
                'indexes': [models.Index(fields=['object_id'], name='dashboard_s_object__c1fcc9_idx'), models.Index(fields=['timestamp'], name='dashboard_s_timesta_6d96de_idx'), models.Index(fields=['stars'], name='dashboard_s_stars_2d9990_idx')],
            },
        ),
        migrations.AddIndex(
            model_name='chart',
            index=models.Index(fields=['id'], name='dashboard_c_id_65e202_idx'),
        ),
        migrations.AddIndex(
            model_name='chart',
            index=models.Index(fields=['start_date'], name='dashboard_c_start_d_63ebb2_idx'),
        ),
        migrations.AddIndex(
            model_name='chart',
            index=models.Index(fields=['end_date'], name='dashboard_c_end_dat_87ebe3_idx'),
        ),
        migrations.AddIndex(
            model_name='userprofile',
            index=models.Index(fields=['team'], name='dashboard_u_team_id_a68f2a_idx'),
        ),
        migrations.AddIndex(
            model_name='userprofile',
            index=models.Index(fields=['id'], name='dashboard_u_id_695ee2_idx'),
        ),
        migrations.AddIndex(
            model_name='userprofile',
            index=models.Index(fields=['user'], name='dashboard_u_user_id_48b5f5_idx'),
        ),
        migrations.AddIndex(
            model_name='team',
            index=models.Index(fields=['team_lead'], name='dashboard_t_team_le_61750d_idx'),
        ),
        migrations.AddIndex(
            model_name='team',
            index=models.Index(fields=['id'], name='dashboard_t_id_1d4008_idx'),
        ),
        migrations.AddIndex(
            model_name='team',
            index=models.Index(fields=['name'], name='dashboard_t_name_246b05_idx'),
        ),
        migrations.AddIndex(
            model_name='task',
            index=models.Index(fields=['completed'], name='dashboard_t_complet_5bea0a_idx'),
        ),
        migrations.AddIndex(
            model_name='task',
            index=models.Index(fields=['due_date'], name='dashboard_t_due_dat_b69917_idx'),
        ),
        migrations.AddIndex(
            model_name='task',
            index=models.Index(fields=['id'], name='dashboard_t_id_7d6048_idx'),
        ),
        migrations.AddIndex(
            model_name='task',
            index=models.Index(fields=['creation_date'], name='dashboard_t_creatio_f06901_idx'),
        ),
        migrations.AddIndex(
            model_name='messagescopy',
            index=models.Index(fields=['user'], name='dashboard_m_user_id_54a2ec_idx'),
        ),
        migrations.AddIndex(
            model_name='messagescopy',
            index=models.Index(fields=['timestamp'], name='dashboard_m_timesta_d22ff3_idx'),
        ),
        migrations.AddIndex(
            model_name='messagescopy',
            index=models.Index(fields=['id'], name='dashboard_m_id_7ad2bc_idx'),
        ),
        migrations.AddIndex(
            model_name='messages',
            index=models.Index(fields=['user'], name='dashboard_m_user_id_5afbd9_idx'),
        ),
        migrations.AddIndex(
            model_name='messages',
            index=models.Index(fields=['timestamp'], name='dashboard_m_timesta_94d61d_idx'),
        ),
        migrations.AddIndex(
            model_name='messages',
            index=models.Index(fields=['id'], name='dashboard_m_id_b94aff_idx'),
        ),
        migrations.AddIndex(
            model_name='chatmessages',
            index=models.Index(fields=['created_at'], name='dashboard_c_created_e82d81_idx'),
        ),
        migrations.AddIndex(
            model_name='schedule',
            index=models.Index(fields=['user'], name='dashboard_s_user_id_bbf1fa_idx'),
        ),
        migrations.AddIndex(
            model_name='schedule',
            index=models.Index(fields=['week_range'], name='dashboard_s_week_ra_7b1387_idx'),
        ),
    ]
