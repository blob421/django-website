# Generated by Django 5.2.4 on 2025-07-30 19:20

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='ChartSection',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=30, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Role',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
                ('redirect_url', models.CharField(default='dashboard:home', help_text='* Path to dashboard, do not change', max_length=255)),
                ('description', models.TextField(blank=True)),
            ],
        ),
        migrations.CreateModel(
            name='Team',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('pinned_msg', models.TextField(default='---', null=True)),
                ('name', models.CharField(blank=True, max_length=40)),
                ('description', models.TextField(null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Users',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('street_address', models.CharField(blank=True, max_length=50)),
                ('phone', models.CharField(blank=True, max_length=12)),
                ('assigned_on', models.DateField(auto_now_add=True)),
                ('notes', models.TextField(blank=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Chart',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=40)),
                ('start_date', models.DateTimeField()),
                ('end_date', models.DateTimeField()),
                ('sections', models.ManyToManyField(to='dashboard.chartsection')),
            ],
        ),
        migrations.CreateModel(
            name='Task',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.TextField()),
                ('name', models.CharField(max_length=50)),
                ('creation_date', models.DateField(auto_now_add=True)),
                ('due_date', models.DateTimeField()),
                ('completed', models.BooleanField(default=False)),
                ('urgent', models.BooleanField(default=False)),
                ('picture', models.BinaryField(blank=True, editable=True, null=True)),
                ('content_type', models.CharField(blank=True, max_length=50, null=True)),
                ('completion_note', models.TextField(blank=True, null=True)),
                ('denied', models.BooleanField(default=False)),
                ('deny_reason', models.TextField(blank=True, null=True)),
                ('chart', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='dashboard.chart')),
                ('section', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='dashboard.chartsection')),
            ],
        ),
        migrations.AddField(
            model_name='chart',
            name='tasks',
            field=models.ManyToManyField(blank=True, null=True, related_name='chart_tasks', to='dashboard.task'),
        ),
        migrations.AddField(
            model_name='chart',
            name='teams',
            field=models.ManyToManyField(to='dashboard.team'),
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('notes', models.TextField(blank=True)),
                ('recipients', models.ManyToManyField(blank=True, default='----', related_name='many_relation', to=settings.AUTH_USER_MODEL)),
                ('role', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='dashboard.role')),
                ('team', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='dashboard.team')),
                ('user', models.OneToOneField(help_text='* You can add a new user with the plus sign ', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'Add a user',
            },
        ),
        migrations.AddField(
            model_name='team',
            name='team_lead',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='team_lead', to='dashboard.userprofile'),
        ),
        migrations.AddField(
            model_name='task',
            name='submitted_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='dashboard.userprofile'),
        ),
        migrations.AddField(
            model_name='task',
            name='users',
            field=models.ManyToManyField(related_name='task_users', to='dashboard.userprofile'),
        ),
        migrations.CreateModel(
            name='MessagesCopy',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=60)),
                ('content', models.TextField()),
                ('timestamp', models.DateTimeField()),
                ('forwarded', models.BooleanField(default=False)),
                ('picture', models.BinaryField(blank=True, editable=True, null=True)),
                ('content_type', models.CharField(blank=True, max_length=50, null=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sender_copy', to=settings.AUTH_USER_MODEL)),
                ('task', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='dashboard.task')),
                ('forwarded_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='dashboard.userprofile')),
                ('recipient', models.ManyToManyField(blank=True, default='', null=True, related_name='receiver_copy', to='dashboard.userprofile')),
            ],
        ),
        migrations.CreateModel(
            name='Messages',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=60)),
                ('content', models.TextField()),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('forwarded', models.BooleanField(default=False)),
                ('picture', models.BinaryField(blank=True, editable=True, null=True)),
                ('content_type', models.CharField(blank=True, max_length=50, null=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sender', to=settings.AUTH_USER_MODEL)),
                ('task', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='dashboard.task')),
                ('forwarded_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='dashboard.userprofile')),
                ('recipient', models.ManyToManyField(blank=True, default='', null=True, related_name='receiver', to='dashboard.userprofile')),
            ],
        ),
        migrations.CreateModel(
            name='CompletedTasks',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.TextField()),
                ('name', models.CharField(max_length=50)),
                ('completed', models.BooleanField(default=True)),
                ('urgent', models.BooleanField(default=False)),
                ('due_date', models.DateTimeField()),
                ('creation_date', models.DateField()),
                ('content_type', models.CharField(blank=True, max_length=50, null=True)),
                ('picture', models.BinaryField(blank=True, editable=True, null=True)),
                ('completion_note', models.TextField(null=True)),
                ('approved_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='aproved_by', to='dashboard.userprofile')),
                ('submitted_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='dashboard.userprofile')),
                ('users', models.ManyToManyField(related_name='task_completed_users', to='dashboard.userprofile')),
            ],
        ),
        migrations.CreateModel(
            name='ChatMessages',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('message', models.CharField(max_length=255)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('team', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dashboard.team')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dashboard.userprofile')),
            ],
        ),
    ]
